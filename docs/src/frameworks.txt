=====================
Framework Integration
=====================

Jinja registers itself in the baker template plugin system. If your framework
supports baker (currently `TurboGears`_ and `pylons`_) you can add it very
easily.

Pylons
------

Edit ``yourproject/config/middleware.py`` and add the following lines to
`config.init_app...`:

.. sourcecode:: python

    from jinja import Environment, FileSystemLoader

    config.add_template_engine('jinja', {
        'jinja.environment': Environment(loader=FileSystemLoader('path/to/templates'))
    })

To make Jinja the default template engine change the `init_app` call to
something like this:

.. sourcecode:: python

    config.init_app(global_conf, app_conf, package='yourproject',
                    template_engine='jinja')


TurboGears
----------

Integrating Jinja into TurboGears works pretty much the same.

Basically all you have to do is to edit the application configuration file at
``application/config/app.cfg`` and change `global.tg.defaultview` and
provide the jinja options:

.. sourcecode:: ini

    [global]
    tg.defaultview = 'jinja'
    jinja.loader.searchpath = '/path/to/templates'

Because of the limitations of the configuration file there is currently no way
to configure jinja correctly. This problem does not exist with pylons since you
can pass any python object to the baker configuration system. We're currently
looking for solutions to this problem.


.. _TurboGears: http://www.turbogears.org/
.. _pylons: http://www.pylonshq.com/
