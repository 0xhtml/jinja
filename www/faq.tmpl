<% extends 'layout/base.tmpl' %>
<% set title = 'FAQ' %>
<% set active_page = 'faq' %>
<% block content %>
  <h1>Frequently Asked Questions</h1>
  <p>
    Here a list of frequently asked questions.
  </p>
  <h2>Why the Name?</h2>
  <p>
    The name Jinja was chosen because it's the name of a Japanese temple and
    temple and template share a similar pronunciation.
  </p>
  <h2>How fast is it?</h2>
  <p>
    I really hate benchmarks especially since they don't reflect much. The
    performance of a template depends on many factors and you would have to
    benchmark different engines in differen situations. However Jinja isn't
    slow. The benchmarks from the testsuite show that Jinja is about twice
    as fast as Django templates and about three times as slow as
    <a href="http://www.makotemplates.org/">mako</a>. That's not bad for a
    sandboxed template engine that has to sanitize template input on the fly.
    If you really need the best performance of a template engine consider
    using mako.
  </p>
  <h2>What happened to Jinja &lt; 1?</h2>
  <p>
    Before Jinja 1 there was a template engine too with the same name. Beside
    the name and the same maintainer those two projects don't share a single
    line of code. If you have an application using Jinja &lt; 1 you should try
    to make it Jinja 1 compatible. If that's not possible, the old project is
    still available as 
    <a href="http://trac.pocoo.org/repos/jinja/branches/0.9-maint/">0.9-maint</a>
    in the Jinja subversion repository.
  </p>
  <h2>Why should I use Jinja?</h2>
  <p>
    There are dozens of template engines for Python, many of them try to
    achieve different things. If you are looking for a XML based template
    engine have a look at <a href="http://genshi.edgewall.org/">genshi</a>,
    if you want a bleezing fast template engine with the full range of
    python constructs have a look at mako. If you want sandboxed templates
    you probably want to check out Jinja.
  </p>
  <h2>Differences to Django</h2>
  <p>
    While the Jinja default syntax looks pretty much like Django the rest of
    the template engine works completely different. Jinja was designed to be
    used without Django and to support Python expressions.
  </p>
  <p>Features that Jinja has in common with Django</p>
  <ul>
    <li>filter functions</li>
    <li>block based template inheritance</li>
    <li>the <tt>{% cycle %}</tt> and <tt>{% filter %}</tt> tag</li>
    <li>being sandboxed</li>
    <li>similar default syntax</li>
  </ul>
  <p>Differences to Django</p>
  <ul>
    <li>advanced lexer that allows escaping of tags</li>
    <li>generation of bytecode for faster template execution</li>
    <li>definition of macros (often recurring tasks like rendering
        dialog boxes, form elements etc.)</li>
    <li>raw blocks</li>
    <li>uncoupled internationalization support</li>
    <li>expression support in any tag</li>
    <li>abbility of modifying the context from the template
        by using the <tt>{% set %}</tt> tag.</li>
    <li>support for function calling with arguments</li>
    <li>filters can be called with a variable argument count</li>
    <li>full unicode support</li>
    <li>deferred objects (objects that are resolved on first
        access, not on context instanciation)</li>
    <li>Missing support for <tt>{{ block.super }}</tt></li>
    <li>Support for recursing by using recursing for loops
        or self calling macros.</li>
    <li>If blocks have support for multiple elif statements</li>
    <li>for loops have an optional else block executed if
        there was no iteration.</li>
    <li>test functions like <tt>is even</tt> etc.</li>
    <li>block delimiters are exchangeable.</il>
    <li>no implicit function calling</li>
    <li><tt>{% endblock %}</tt> doesn't support the optional name argument</li>
    <li><tt>{% ifchanged %}</tt> is not implemented because of performance
        reasons. If there's enough interest an implementation might be added</li>
    <li><tt>{% templatetag %}</tt> is not implemented because Jinja supports
        escaping via <tt>{% raw %}</tt> or the variable syntax</li>
    <li><tt>{% comment %}</tt> is not implemented, rather use
        <tt>{# ... #}</tt> for commenting out stuff.</li>
    <li><tt>{% now %}</tt> is not implemented because Jinja doesn't handle
        l10n. Datetime specific stuff should be provided by the application.</li>
    <li><tt>{% load %}</tt>, loading components for Jinja works from the
        application side. Template designers don't have to import stuff on
        their own.</li>
    <li><tt>{% debug %}</tt> is not implemented. You can use the global
        function <tt>debug()</tt>.</li>
    <li>custom tags are not supported. Most of the stuff that is
        possible with django template tags is possible with either functions,
        filters, tests or a combination of them.</li>
    <li>using keywords like <tt>endfor</tt> as identifer raises an
        exception.</li>
  </ul>
<% endblock %>
